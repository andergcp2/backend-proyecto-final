name: reusable workflow - execute unit tests, build image, deploy to ecr and update ecs service

on:
  workflow_call:
    inputs:
      microservice:
        required: true
        type: string
      microservice-path:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  AWS_REGION: us-east-1
  #ECS_CLUSTER: cluster-abcjobs-qa
  ECS_CLUSTER: abcjobs-cluster

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          src:
            - '${{ inputs.microservice-path }}/**'

  unit-test:
    name: unit tests
    needs: changes
    if: ${{ needs.changes.outputs.src == 'true' }}    
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      working-directory: ${{ inputs.microservice-path }} 
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with pytest
      working-directory: ${{ inputs.microservice-path }} 
      run: |
        pip install pytest pytest-cov
        pytest --cov=. -v -s --cov-fail-under=80

  build-image-deploy:
    name: push image and update service
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v4
    - name: Configurar Credenciales AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Iniciar sesión en AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Crear, etiquetar y enviar imágen a AWS ECR
      working-directory: ${{ inputs.microservice-path }}    
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.microservice }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Actualizar versión en ECS
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ inputs.microservice }}-service --task-definition ${{ inputs.microservice }}-task --force-new-deployment

# check image tag strategy in: 
# https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service


# Ejemplo de github action para probar python
# Docs: https://docs.github.com/es/actions/using-workflows/workflow-syntax-for-github-actions
#name: Example CI
name: Grupo 18 CI DEV

on:
  push:
    branches:
      - develop
  pull_request:
    branches: 
      - develop

jobs:
  test-pruebas-query:
    name: unit tests pruebas-query 
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v1
      - name: Install environment
        working-directory: ./experimentos/pruebas-query
        run: |
          pip install pipenv
          pipenv sync --system --dev
          export VIRTUAL_ENV="$(pipenv --venv)" PATH="$(pipenv --venv)/bin:$PATH"
      - name: Run unit tests
        working-directory: ./experimentos/pruebas-query
        run: |
          pytest --cov=. -v -s --cov-fail-under=80

  create-image-pruebas-query:
    name: crear imagen docker pruebas-query en AWS ECR
    runs-on: ubuntu-latest
    needs: test-pruebas-query
    steps:
    - uses: actions/checkout@v2
    - name: Configurar Credenciales de AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Iniciar sesión en AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Crear, etiquetar y enviar imágen a AWS ECR
      working-directory: ./experimentos/pruebas-query    
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test-ms
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-pruebas-query:
    name: enviar imagen docker a AWS ECS
    runs-on: ubuntu-latest
    needs: create-image-pruebas-query
    steps:
      - name: Configurar Credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
 
      - name: Actualizar versión en ECS
        run: |
          aws ecs update-service --cluster cluster-abcjobs-qa --service test-ms-service --task-definition task-test-ms --force-new-deployment

# on:
#   push:
#     branches: 
#       - develop
# jobs:
#   test-company:
#     runs-on: ubuntu-latest
#     strategy:
#       max-parallel: 1
#       matrix:
#         python-version: [ 3.9 ]
#     steps:
#       - uses: actions/checkout@v1
#       - name: Install environment
#         working-directory: ./companies
#         run: |
#           pip install pipenv
#           pipenv sync --system --dev
#           export VIRTUAL_ENV="$(pipenv --venv)" PATH="$(pipenv --venv)/bin:$PATH"
#       - name: Run unit tests
#         working-directory: ./companies
#         run: |
#           pytest --cov=. -v -s --cov-fail-under=80
  
